%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Computational Logic A & D / PROJECT SECOND SEMESTER 2015 
%%%%% Based on the poof techniques applied to formalize 
%%%%% correctness of sorting algorithms verify correctness
%%%%% of heap sort.
%%%%% The data structure used is finite sequences. 
%%%%% Theorems for finite sequences in the prelude library
%%%%% as well as in the theory structures@seq_extras might
%%%%% be useful. 
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% M. Ayala-Rincon, A. A. Almeida, Flavio L.C. de Moura,
%%% N. Bernardes
%%% Last modification:  October 06, 2017
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sorting_seq : THEORY

BEGIN

IMPORTING sorting, structures@seq_extras[nat], structures@listn[nat]


s, s1, s2, h, v : VAR finite_sequence[nat]   % This is the Data Structure for heaps
i,j : VAR nat  
l, l1, l2 : VAR list[nat]  

%% Permutations check whether two finite sequences are permutations
%% preserving occurrences of each key.
occurrences(h)(x:nat): RECURSIVE nat =
IF  length(h) = 0 THEN 0
    ELSIF 
      h(0) = x THEN 1 + occurrences(h^(1,length(h)-1))(x)
      ELSE
	occurrences(h^(1,length(h)-1))(x)
	ENDIF
MEASURE length(h)

finseq2list_rec_equivalence: LEMMA
FORALL(i,k: below[length(h)]): 
     i <= length(h) - k IMPLIES
     finseq2list_rec(h^(k, h`length - 1), i) =
     			   finseq2list_rec(h, i) 

finseq2lists_for_suffixes : COROLLARY 
FORALL ((h | length(h) > 0), i : below[length(h)]) :
 finseq2list_rec( h^(i, length(h) - 1), length(h) - i) =  finseq2list_rec(h,length(h)  - i) 

% Uses previous Corollary
subseq_is_cdr : COROLLARY
FORALL (h | length(h) > 0):
finseq2list(h ^ (1, length(h) - 1)) = cdr(finseq2list(h))

same_occ_fseq_list  : LEMMA  
FORALL(h, (x :nat)) : occurrences(h)(x) = occurrences(finseq2list(h))(x) 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
%% To be included in the sorting over sequences  
%% and lists of elements in any measure space
%% New results for Comp. Logic Course Project 2016/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  

%This lemma is given specificaly for finseq[char] in the prelude
list2fseq_lem: LEMMA
    (list2finseq(l1) = list2finseq(l2)) = (l1 = l2)

l2fs_fs2l_is_id : LEMMA 
  FORALL(s : finite_sequence[nat]) :
     list2finseq(finseq2list(s)) = s

fs2l_l2fs_is_id : LEMMA 
  FORALL(l : list[nat]) :
     finseq2list(list2finseq(l)) = l

length_of_fs2list : LEMMA length(finseq2list(h)) = length(h)  

same_nth_fseq_list  : LEMMA  
FORALL(h, (i : below[length(h)])) : h(i) = nth(finseq2list(h),i) 

same_nth_list_fseq  : COROLLARY  
FORALL(l, (i : below[length(l)])) : nth(l,i) = (list2finseq(l))(i) 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Permutations check whether two lists are permutations
%% counting occurrences of their elements.
permutations(h1,h2:finite_sequence[nat]):bool =
 FORALL (x:nat): occurrences(h1)(x) = occurrences(h2)(x)

%% Permutations relation in finite sequences and their 
%% corresponding lists coincide.
perm_fsq_iff_perm_list : LEMMA  FORALL(h1,h2:finite_sequence[nat]) : 
   permutations(h1,h2) <=> permutations(finseq2list(h1), finseq2list(h2))  

%% Permutations is an equivalence relation on finite sequences.
permutations_equiv :  LEMMA 
reflexive?(permutations)  AND 
symmetric?(permutations) AND 
transitive?(permutations)

% Boolean for partially and fully sorted heaps
psorted(h)(i : below[length(h)] , ( j : below[length(h)] | i <= j)) : bool =
length(h) = 0 OR 
(FORALL (k : below[length(h)]) :
     (i <= k AND k <= j - 1) => (k<i OR h(k) <= h(k+1)))

% Predicate for sorted finite sequences.
sorted(h) : bool = length(h) = 0 OR psorted(h)(0,length(h) - 1) 

% Indices of the left and right child in heaps
ind_lc(i) : nat = 2 * i + 1
ind_rc(i) : nat = 2 * i + 2

% Index of the parent of the kth node (not used)
ind_parent(k : posnat) : nat = floor((k-1)/2) 
 
% Booleans for testing whether the i-th node in the partial heap 
% from 0 to n, has or not both a left and a right child or only 
% a left child.
% Also, a boolean for checking if a heap node is a parent. 
both_childs(h)(n:below[length(h)], (i:below[length(h)] | i <= n)) : bool = ind_rc(i) < n + 1 
one_child(h)(n:below[length(h)], (i:below[length(h)] | i <= n)) : bool = ind_rc(i) = n + 1 
is_parent(h)(n:below[length(h)], (i:below[length(h)] | i <= n)) : bool = both_childs(h)(n,i) OR one_child(h)(n,i)

% The left and right child of the ith node in the whole heap, from 0 to |h| - 1
left_child(h)(i : nat | ind_lc(i) < length(h))  : nat = h(ind_lc(i))
right_child(h)(i : nat | ind_rc(i) < length(h)) : nat = h(ind_rc(i))

% Boolean for partially and fully "heapified" heaps. A finite sequence
% is an heap when it holds the ordering heap restriction that all 
% parents are greater than their children.
is_p_heap(h)(i : below[length(h)] , ( j : below[length(h)] | i <= j)) : bool = 
FORALL(k : below[length(h) - 1]) : k < i OR  
                                   (k<=j => (is_parent(h)(j,k) => 
                                    ( (both_childs(h)(j,k) AND 
                                      h(k) >= left_child(h)(k) AND  h(k) >= right_child(h)(k)) OR 
                                    (one_child(h)(j,k) AND  h(k) >= left_child(h)(k)))))

is_heap(h) : bool = length(h)=0 OR is_p_heap(h)(0, length(h) - 1)  

% The root node is the greatest in a heapified partial heap

root_is_greatest_in_p_heap : LEMMA   
 FORALL (h, (n : below[length(h)]), (i: below[n+1])) : 
 	is_p_heap(h)(0,n) => h(0) >= h(i)

root_is_greatest_in_heap : COROLLARY    
 FORALL (h, (i : below[length(h)])) : 
 	is_heap(h) =>  h(0) >= h(i)


% The parent of the kth node. (not used)
parent(h)(k : posnat | k < length(h)) : nat = h(floor((k-1)/2))
 
% The index of the greatest child of the ith node of the partial 
% heap from 0 to n.
ind_gc(h)(n:below[length(h)], (i : below[n + 1] | is_parent(h)(n,i))) : nat = 
 IF (both_childs(h)(n,i) AND left_child(h)(i) < right_child(h)(i)) THEN ind_rc(i)
 ELSE ind_lc(i) ENDIF   

% Constructioh of the swap of nodes ith and jth in a heap h
swap(h)(i, j : below[length(h)]) :  finite_sequence[nat] =
 (# length := length(h) ,  
    seq := (LAMBDA (k : below[length(h)]) : IF k = i THEN h(j) ELSIF k = j THEN h(i) ELSE h(k) ENDIF)  #)

swap_of_p_heap : LEMMA
FORALL((h | length(h) > 0),  (n : below[length(h)]), (i:below[n+1])) :
         is_p_heap(h)(0,n) => swap(h)(n,0)(n) >= h(i)

swap_commutes : LEMMA 
FORALL (h, (i, j : below[length(h)])):
swap(h)(i,j) = swap (h)(j,i)

occ_replaces_at_j  : LEMMA 
FORALL (h, (j : below[length(h)]), (x, y : nat)):
LET hp = (# length := length(h), 
          seq := (LAMBDA (k : below[length(h)]) : 
                     IF k = j then x ELSE h(k) ENDIF) #) IN
 occurrences(hp)(y) = 
  IF x = h(j) THEN  occurrences(h)(y) 
  ELSE IF y = x  THEN occurrences(h)(y) + 1 
       ELSE IF y = h(j) THEN occurrences(h)(y) - 1
            ELSE occurrences(h)(y) ENDIF  
       ENDIF
  ENDIF
 
swap_occ_at_0 :  COROLLARY
FORALL (h, (j : below[length(h)] | j > 0), (x : nat)):
occurrences(swap(h)(0,j)^(1, length(h) - 1))(x) = 
IF h(j) = x THEN occurrences(h)(x) - 1 
ELSE  occurrences(h)(x) ENDIF 

swap_permutes : LEMMA 
FORALL (h, (i, j : below[length(h)])) : permutations(h, swap(h)(i,j))
 

% swapping the first element with the last one in a heap
% places the greater element in last position 
swap_of_heap : LEMMA
FORALL((h | length(h) > 0),  (i : below[length(h)])) :
         is_heap(h) => swap(h)(length(h)-1,0)(length(h)-1) >= h(i)


% Auxiliary lemmas on sequence insert and delete used for
% proving soundness of bin(ary)insertionsort

occ_in_insert : LEMMA FORALL (v)(x,y:nat,k:upto[length(v)]) :
 IF x=y THEN occurrences(insert?(y,v,k))(x) = 1 + occurrences(v)(x)
 ELSE  occurrences(insert?(y,v,k))(x) = occurrences(v)(x)
 ENDIF

occ_in_delete : LEMMA FORALL (v)(x:nat)(i:below[length(v)]) :
 IF x=v(i) THEN occurrences(delete(v,i))(x) = occurrences(v)(x) - 1
 ELSE  occurrences(delete(v,i))(x) = occurrences(v)(x)
 ENDIF

delete_insert_same_permutes  : LEMMA 
FORALL (v | length(v)>0)(i,j:below[length(v)]) :
permutations(v,insert?(v(i), delete(v, i), j)) 

end sorting_seq

