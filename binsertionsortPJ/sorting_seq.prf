(sorting_seq
 (occurrences_TCC1 0
  (occurrences_TCC1-1 nil 3651245593 ("" (subtype-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (occurrences_TCC2 0
  (occurrences_TCC2-1 nil 3651245593 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (occurrences_TCC3 0
  (occurrences_TCC3-1 nil 3651245593 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (occurrences_TCC4 0
  (occurrences_TCC4-1 nil 3651245593 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (occurrences_TCC5 0
  (occurrences_TCC5-1 nil 3651245593 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (finseq2list_rec_equivalence_TCC1 0
  (finseq2list_rec_equivalence_TCC1-1 nil 3651472064
   ("" (subtype-tcc) nil nil) nil nil))
 (finseq2list_rec_equivalence_TCC2 0
  (finseq2list_rec_equivalence_TCC2-1 nil 3651472064
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (finseq2list_rec_equivalence_TCC3 0
  (finseq2list_rec_equivalence_TCC3-1 nil 3651472064
   ("" (subtype-tcc) nil nil) nil nil))
 (finseq2list_rec_equivalence 0
  (finseq2list_rec_equivalence-2 nil 3652026673
   ("" (skolem 1 ("h" "_" "_"))
    (("" (induct i)
      (("1" (prop) (("1" (grind) nil nil)) nil)
       ("2" (skolem 1 "j")
        (("2" (prop)
          (("2" (skeep)
            (("2" (inst -2 "k")
              (("2" (assert)
                (("2" (expand "finseq2list_rec" 1)
                  (("2" (expand "^" 1 (1 2))
                    (("2" (expand "min") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (hide 2)
          (("3" (expand "^" 1)
            (("3" (expand "min") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (h skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil))
   nil)
  (finseq2list_rec_equivalence-1 nil 3651472068
   ("" (skolem 1 ("h" "_" "_"))
    (("" (induct i)
      (("1" (prop) (("1" (grind) nil nil)) nil)
       ("2" (skolem 1 j)
        (("2" (prop)
          (("2" (skeep)
            (("2" (inst -2 "k")
              (("2" (assert)
                (("2" (expand "finseq2list_rec" 1)
                  (("2" (expand "^" 1 (1 2))
                    (("2" (expand "min") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep)
        (("3" (hide 2)
          (("3" (expand ^ 1)
            (("3" (expand "min") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (finseq2lists_for_suffixes_TCC1 0
  (finseq2lists_for_suffixes_TCC1-1 nil 3651415934
   ("" (subtype-tcc) nil nil) nil nil))
 (finseq2lists_for_suffixes_TCC2 0
  (finseq2lists_for_suffixes_TCC2-1 nil 3651415934
   ("" (subtype-tcc) nil nil)
   ((min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (finseq2lists_for_suffixes_TCC3 0
  (finseq2lists_for_suffixes_TCC3-1 nil 3651415934
   ("" (subtype-tcc) nil nil) nil nil))
 (finseq2lists_for_suffixes 0
  (finseq2lists_for_suffixes-2 nil 3652026727
   ("" (skolem 1 ("h" "_"))
    (("" (induct "i")
      (("1" (flatten)
        (("1" (assert)
          (("1" (case "h ^ (0, length(h) - 1) = h")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (expand "^")
                (("2" (decompose-equality)
                  (("1" (grind) nil nil)
                   ("2" (decompose-equality) (("2" (grind) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "finseq2list_rec_equivalence")
          (("2" (inst -1 "h" "length(h) - (jb + 1)" "jb+1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (h skolem-const-decl "{h | length(h) > 0}" sorting_seq nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finseq2list_rec_equivalence formula-decl nil sorting_seq nil)
    (jb skolem-const-decl "below(length(h))" sorting_seq nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (finseq2lists_for_suffixes-1 nil 3651416609
   ("" (skolem 1 ("h" "_"))
    (("" (induct "i")
      (("1" (flatten)
        (("1" (assert)
          (("1" (case "h ^ (0, length(h) - 1) = h")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (expand "^")
                (("2" (decompose-equality)
                  (("1" (grind) nil nil)
                   ("2" (decompose-equality) (("2" (grind) nil nil))
                    nil)
                   ("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "finseq2list_rec_equivalence")
          (("2" (inst -1 "h" "length(h) - (jb + 1)" "jb+1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (subseq_is_cdr_TCC1 0
  (subseq_is_cdr_TCC1-1 nil 3651379346 ("" (subtype-tcc) nil nil) nil
   nil))
 (subseq_is_cdr_TCC2 0
  (subseq_is_cdr_TCC2-1 nil 3651379346
   ("" (skeep) (("" (typepred "h") (("" (grind) nil nil)) nil)) nil)
   ((finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil))
   nil))
 (subseq_is_cdr 0
  (subseq_is_cdr-2 nil 3652026777
   ("" (skeep)
    (("" (expand "finseq2list")
      (("" (expand "finseq2list_rec" 1 2)
        (("" (expand "^" 1 2)
          (("" (lift-if)
            (("" (prop)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (expand "min")
                (("3" (lemma "finseq2lists_for_suffixes")
                  (("3" (inst -1 "h" "1") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq2list const-decl "list[T]" list2finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq2lists_for_suffixes formula-decl nil sorting_seq nil)
    (h skolem-const-decl "{h | length(h) > 0}" sorting_seq nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil))
   nil)
  (subseq_is_cdr-1 nil 3651411775
   ("" (skeep)
    (("" (expand "finseq2list")
      (("" (expand "finseq2list_rec" 1 2)
        (("" (expand "^" 1 2)
          (("" (lift-if)
            (("" (prop)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (expand "min")
                (("3" (lemma "finseq2lists_for_suffixes")
                  (("3" (inst -1 "h" "1") (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq2list const-decl "list[T]" list2finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil))
   shostak))
 (same_occ_fseq_list 0
  (same_occ_fseq_list-4 nil 3652453907
   ("" (measure-induct+ "length(h)" ("h"))
    (("" (skeep)
      (("" (expand "occurrences" 1 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (grind) nil)))
             ("2" (expand "occurrences" 1 2)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide -3) (("1" (grind) nil)))
                   ("2" (inst -3 "x!1 ^ (1, length(x!1) - 1)")
                    (("1" (inst -3 "x")
                      (("1" (prop)
                        (("1" (rewrite "subseq_is_cdr")
                          (("1" (assert) nil)))
                         ("2" (hide-all-but (1 4))
                          (("2" (grind) nil)))))))
                     ("2" (hide-all-but (1 4)) (("2" (grind) nil)))))
                   ("3" (hide -2 2) (("3" (grind) nil)))))))))
             ("3" (expand "occurrences" 2 2)
              (("3" (lift-if)
                (("3" (prop)
                  (("1" (hide-all-but (-1 3)) (("1" (grind) nil)))
                   ("2" (hide-all-but (-1 3 4)) (("2" (grind) nil)))
                   ("3" (inst -1 "x!1 ^ (1, length(x!1) - 1)")
                    (("1" (inst -1 "x")
                      (("1" (prop)
                        (("1" (rewrite "subseq_is_cdr") nil)
                         ("2" (hide-all-but (1 6))
                          (("2" (grind) nil)))))))
                     ("2" (hide-all-but (1 6))
                      (("2" (grind) nil))))))))))))))))))))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (subseq_is_cdr formula-decl nil sorting_seq nil)
    (x!1 skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (occurrences def-decl "nat" sorting nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (occurrences def-decl "nat" sorting_seq nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (same_occ_fseq_list-3 nil 3652453048
   ("" (measure-induct+ "length(h)" ("h"))
    (("" (skeep)
      (("" (expand "occurrences" 1 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (grind) nil)))
             ("2" (expand "occurrences" 1 2)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide -3) (("1" (grind) nil)))
                   ("2" (inst -3 "x!1 ^ (1, length(x!1) - 1)")
                    (("1" (inst -3 "x")
                      (("1" (prop)
                        (("1" (rewrite "subseq_is_cdr")
                          (("1" (assert) nil)))
                         ("2" (hide-all-but (1 4))
                          (("2" (grind) nil)))))))
                     ("2" (hide-all-but (1 4)) (("2" (grind) nil)))))
                   ("3" (hide -2 2) (("3" (grind) nil)))))))))
             ("3" (expand "occurrences" 2 2)
              (("3" (lift-if)
                (("3" (prop)
                  (("1" (hide-all-but (-1 3)) (("1" (grind) nil)))
                   ("2" (hide-all-but (-1 3 4)) (("2" (grind) nil)))
                   ("3" (inst -1 "x!1 ^ (1, length(x!1) - 1)")
                    (("1" (inst -1 "x")
                      (("1" (prop)
                        (("1" (rewrite "subseq_is_cdr") nil)
                         ("2" (hide-all-but (1 6))
                          (("2" (grind) nil)))))))
                     ("2" (hide-all-but (1 6))
                      (("2" (grind) nil))))))))))))))))))))
    nil)
   nil nil)
  (same_occ_fseq_list-2 nil 3652111906
   ("" (measure-induct+ "length(h)" ("h"))
    (("" (skeep)
      (("" (expand "occurrences" 1 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (expand "occurrences" 1 2)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide -3) (("1" (grind) nil nil)) nil)
                   ("2" (inst -3 "x!1 ^ (1, length(x!1) - 1)")
                    (("1" (inst -3 "x")
                      (("1" (prop)
                        (("1" (rewrite "subseq_is_cdr")
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but (1 4))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 4)) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (hide -2 2) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (expand "occurrences" 2 2)
              (("3" (lift-if)
                (("3" (prop)
                  (("1" (hide-all-but (-1 3)) (("1" (grind) nil nil))
                    nil)
                   ("2" (hide-all-but (-1 3 4)) (("2" (grind) nil nil))
                    nil)
                   ("3" (inst -1 "x!1 ^ (1, length(x!1) - 1)")
                    (("1" (inst -1 "x")
                      (("1" (prop)
                        (("1" (rewrite "subseq_is_cdr") nil nil)
                         ("2" (hide-all-but (1 6))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 6)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (same_occ_fseq_list-1 nil 3651245600
   ("" (measure-induct+ "length(h)" ("h"))
    (("" (skeep)
      (("" (expand "occurrences" 1 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (expand "occurrences" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (hide -3) (("1" (grind) nil nil)) nil)
                   ("2" (inst -3 "x!1 ^ (1, length(x!1) - 1)")
                    (("1" (inst -3 "x")
                      (("1" (prop)
                        (("1" (rewrite "subseq_is_cdr")
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but (1 4))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 4)) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (hide -2 2) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (expand "occurrences" 2)
              (("3" (lift-if)
                (("3" (prop)
                  (("1" (hide-all-but (-1 3)) (("1" (grind) nil nil))
                    nil)
                   ("2" (hide-all-but (-1 3 4)) (("2" (grind) nil nil))
                    nil)
                   ("3" (inst -1 "x!1 ^ (1, length(x!1) - 1)")
                    (("1" (inst -1 "x")
                      (("1" (prop)
                        (("1" (rewrite "subseq_is_cdr") nil nil)
                         ("2" (hide-all-but (1 6))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (1 6)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (list2fseq_lem 0
  (list2fseq_lem-1 nil 3671534065
   ("" (induct "l1")
    (("1" (induct "l2") (("1" (grind) nil nil)) nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (inst -1 "cdr(l2!1)")
          (("1" (iff)
            (("1" (prop)
              (("1" (assert)
                (("1" (apply-extensionality)
                  (("1" (expand "list2finseq" -1)
                    (("1" (flatten)
                      (("1" (decompose-equality -2)
                        (("1" (inst -1 "0")
                          (("1" (expand "nth") (("1" (propax) nil nil))
                            nil)
                           ("2" (expand "length" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil)
               ("3" (expand "list2finseq" -1)
                (("3" (expand "list2finseq" 3)
                  (("3" (flatten)
                    (("3" (split)
                      (("1" (expand "length" -1)
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply-extensionality)
                        (("1" (decompose-equality -2)
                          (("1" (inst -1 "x!1+1")
                            (("1" (expand "nth" -1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (expand "length" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp)
                          (("2" (expand "length" -1)
                            (("2" (lift-if)
                              (("2"
                                (split -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (assert) nil nil))
              nil))
            nil)
           ("2" (iff)
            (("2" (prop)
              (("1" (expand "list2finseq")
                (("1" (flatten)
                  (("1" (expand "length" -1) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (l2!1 skolem-const-decl "list[nat]" sorting_seq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons1_var!1 skolem-const-decl "nat" sorting_seq nil)
    (cons2_var!1 skolem-const-decl "list[nat]" sorting_seq nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (x!1 skolem-const-decl "below[length(cons2_var!1)]" sorting_seq
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil))
 (l2fs_fs2l_is_id 0
  (l2fs_fs2l_is_id-3 nil 3671534712
   ("" (skeep)
    (("" (lemma "normalize_fseq_def[nat]")
      (("" (inst?)
        (("" (expand "normalize_fseq") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (normalize_fseq_def formula-decl nil listn "structures/")
    (normalize_fseq const-decl "{fsn: Finseqn(f`length) | fsn = f}"
     listn "structures/")
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil))
   nil)
  (l2fs_fs2l_is_id-2 nil 3671534650
   ("" (skeep)
    (("" (lemma "normalize_fseq_def[nat]")
      (("" (inst?)
        (("" (expand "normalize_fseq") (("" (propax) nil))))))))
    nil)
   nil nil)
  (l2fs_fs2l_is_id-1 nil 3671534553
   ("" (skeep)
    (("" (lemma "normalize_fseq_def[nat]")
      (("" (inst?)
        (("" (expand "normalize_fseq") (("" (propax) nil))))))))
    nil)
   nil nil))
 (fs2l_l2fs_is_id 0
  (fs2l_l2fs_is_id-1 nil 3671534782
   ("" (skeep)
    (("" (lemma "list2fseq_lem")
      (("" (inst?) (("" (rewrite "l2fs_fs2l_is_id ") nil nil)) nil))
      nil))
    nil)
   ((list2fseq_lem formula-decl nil sorting_seq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (l2fs_fs2l_is_id formula-decl nil sorting_seq nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil))
   nil))
 (length_of_fs2list 0
  (length_of_fs2list-1 nil 3671535531
   ("" (measure-induct+ "length(h)" ("h"))
    (("" (case "length(x!1) = 0")
      (("1" (hide -2) (("1" (grind) nil nil)) nil)
       ("2" (lemma "seq_first_rest")
        (("2" (inst?)
          (("2" (assert)
            (("2" (lemma "subseq_is_cdr")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (inst -3 "x!1 ^ (1, length(x!1) - 1)")
                    (("2" (prop)
                      (("1" (lemma "seq_first_rest_1")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1"
                              (name-replace "lthfs2list"
                               "finseq2list(x!1)")
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (expand "o" 2)
                                  (("1"
                                    (case "#(first(x!1))`length = 1")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "lthfs2list")
                                        (("1"
                                          (expand "finseq2list" 2)
                                          (("1"
                                            (expand
                                             "finseq2list_rec"
                                             2)
                                            (("1"
                                              (expand "length" 2 1)
                                              (("1"
                                                (lemma
                                                 "finseq2list_rec_equivalence")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "x!1"
                                                   "length(x!1) - 1"
                                                   "1")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "finseq2list"
                                                       -5
                                                       1)
                                                      (("1"
                                                        (case
                                                         "length(x!1 ^ (1, length(x!1) - 1)) = length(x!1) - 1")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -6)
                                                            (("1"
                                                              (replace
                                                               -6
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "rest"
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "^"
                                                                   2)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1
                                                                          2))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1
                                                                          2))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "min"
                                                                         3)
                                                                        (("3"
                                                                          (replace
                                                                           -6
                                                                           3
                                                                           rl)
                                                                          (("3"
                                                                            (expand
                                                                             "finseq2list"
                                                                             -5)
                                                                            (("3"
                                                                              (expand
                                                                               "^"
                                                                               -5
                                                                               2)
                                                                              (("3"
                                                                                (lift-if)
                                                                                (("3"
                                                                                  (prop)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "min"
                                                                                     -1)
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 2))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "length(x!1) = 1")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 2 3))
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 2 3))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (1 2))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (1 2))
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq2list_rec def-decl "list[T]" list2finseq nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (subseq_is_cdr formula-decl nil sorting_seq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (finseq2list_rec_equivalence formula-decl nil sorting_seq nil)
    (lthfs2list skolem-const-decl "list[nat]" sorting_seq nil)
    (first const-decl "T" seq_extras "structures/")
    (not_empty_seq type-eq-decl nil seq_extras "structures/")
    (/= const-decl "boolean" notequal nil)
    (|#| const-decl "finite_sequence[T]" set2seq "structures/")
    (seq_first_rest_1 formula-decl nil seq_extras "structures/")
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (seq_first_rest formula-decl nil seq_extras "structures/")
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (same_nth_fseq_list_TCC1 0
  (same_nth_fseq_list_TCC1-1 nil 3671527520
   ("" (skeep)
    (("" (rewrite "length_of_fs2list")
      (("" (typepred "i") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((length_of_fs2list formula-decl nil sorting_seq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil))
   nil))
 (same_nth_fseq_list 0
  (same_nth_fseq_list-2 nil 3671535514
   ("" (measure-induct+ "length(h)" ("h"))
    (("1" (skeep)
      (("1" (expand "finseq_appl")
        (("1" (typepred "i")
          (("1" (typepred "length(x!1)")
            (("1" (case "length(x!1) = 0")
              (("1" (hide -4 1) (("1" (grind) nil)))
               ("2" (case "i=0")
                (("1" (replace -1)
                  (("1" (hide -) (("1" (grind) nil)))))
                 ("2" (inst -3 "x!1 ^ (1, length(x!1) - 1)")
                  (("2" (inst -3 "i - 1")
                    (("1" (prop)
                      (("1" (rewrite "subseq_is_cdr")
                        (("1" (expand "nth" 3)
                          (("1" (assert)
                            (("1" (lemma "seq_first_rest")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "rest")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (lemma "nth_add_first")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst
                                             -1
                                             "(x!1 ^ (1, x!1`length - 1))"
                                             "first(x!1)"
                                             "i")
                                            (("1" (assert) nil)
                                             ("2"
                                              (hide -1 4)
                                              (("2"
                                                (grind)
                                                nil)))))))))))))))))))))))))
                       ("2" (hide 4) (("2" (grind) nil)))))
                     ("2" (hide 4) (("2" (grind) nil)))))))))))))))))))
     ("2" (typepred "i!1")
      (("2" (hide-all-but (-1 1))
        (("2" (rewrite "length_of_fs2list") nil)))))
     ("3" (hide 2)
      (("3" (typepred "i!1")
        (("3" (rewrite "length_of_fs2list") nil))))))
    nil)
   ((length_of_fs2list formula-decl nil sorting_seq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "finseq" finite_sequences nil)
    (seq_first_rest formula-decl nil seq_extras "structures/")
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras "structures/")
    (first const-decl "T" seq_extras "structures/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth_add_first formula-decl nil seq_extras "structures/")
    (rest const-decl "finseq" seq_extras "structures/")
    (subseq_is_cdr formula-decl nil sorting_seq nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (i skolem-const-decl "below[length(x!1)]" sorting_seq nil)
    (x!1 skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (same_nth_fseq_list-1 nil 3671527570
   ("" (measure-induct+ "length(h)" ("h"))
    (("1" (skeep)
      (("1" (expand "finseq_appl")
        (("1" (typepred "i")
          (("1" (typepred "length(x!1)")
            (("1" (case "length(x!1) = 0")
              (("1" (hide -4 1) (("1" (grind) nil nil)) nil)
               ("2" (case "i=0")
                (("1" (replace -1)
                  (("1" (hide -) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (inst -3 "x!1 ^ (1, length(x!1) - 1)")
                  (("2" (inst -3 "i - 1")
                    (("1" (prop)
                      (("1" (rewrite "subseq_is_cdr")
                        (("1" (expand "nth" 3)
                          (("1" (assert)
                            (("1" (lemma "seq_first_rest")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "rest")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (lemma "nth_add_first")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst
                                             -1
                                             "(x!1 ^ (1, x!1`length - 1))"
                                             "first(x!1)"
                                             "i")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -1 4)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 4) (("2" (grind) nil nil)) nil))
                      nil)
                     ("2" (hide 4) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (typepred "i!1")
      (("2" (hide-all-but (-1 1))
        (("2" (rewrite "length_of_fs2list") nil nil)) nil))
      nil)
     ("3" (hide 2)
      (("3" (typepred "i!1")
        (("3" (rewrite "length_of_fs2list") nil nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finseq2list_rec def-decl "list[T]" list2finseq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (subseq_is_cdr formula-decl nil sorting_seq nil)
    (rest const-decl "finseq" seq_extras "structures/")
    (nth_add_first formula-decl nil seq_extras "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (first const-decl "T" seq_extras "structures/")
    (not_empty_seq type-eq-decl nil seq_extras "structures/")
    (/= const-decl "boolean" notequal nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (seq_first_rest formula-decl nil seq_extras "structures/")
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_of_fs2list formula-decl nil sorting_seq nil))
   shostak))
 (same_nth_list_fseq_TCC1 0
  (same_nth_list_fseq_TCC1-1 nil 3671550095 ("" (subtype-tcc) nil nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)) nil))
 (same_nth_list_fseq 0
  (same_nth_list_fseq-1 nil 3671550096
   ("" (lemma "same_nth_fseq_list")
    (("" (skeep)
      (("" (expand "finseq_appl")
        (("" (inst?)
          (("" (inst?)
            (("" (rewrite "fs2l_l2fs_is_id") (("" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (fs2l_l2fs_is_id formula-decl nil sorting_seq nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (same_nth_fseq_list formula-decl nil sorting_seq nil))
   shostak))
 (perm_fsq_iff_perm_list 0
  (perm_fsq_iff_perm_list-1 nil 3651503041
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "permutations" 1)
          (("1" (expand "permutations")
            (("1" (lemma "same_occ_fseq_list")
              (("1" (lemma "same_occ_fseq_list")
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (inst -2 "h2" "x")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "permutations")
          (("2" (skeep)
            (("2" (inst?)
              (("2" (lemma "same_occ_fseq_list")
                (("2" (lemma "same_occ_fseq_list")
                  (("2" (inst?)
                    (("2" (inst -2 "h2" "x") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations const-decl "bool" sorting nil)
    (same_occ_fseq_list formula-decl nil sorting_seq nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (permutations const-decl "bool" sorting_seq nil))
   shostak))
 (permutations_equiv 0
  (permutations_equiv-1 nil 3651505343
   ("" (split)
    (("1" (expand "reflexive?")
      (("1" (skeep)
        (("1" (expand "permutations") (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (expand "symmetric?")
      (("2" (skeep)
        (("2" (expand "permutations")
          (("2" (skeep) (("2" (inst?) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (expand "transitive?")
      (("3" (skeep)
        (("3" (lemma "permutations_is_transitive")
          (("3" (lemma "perm_fsq_iff_perm_list")
            (("3" (copy -1)
              (("3" (copy -1)
                (("3" (inst?)
                  (("3" (inst -2 "y" "z")
                    (("3" (inst -3 "x" "z")
                      (("3"
                        (inst -4 "finseq2list(x)" "finseq2list(y)"
                         "finseq2list(z)")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((transitive? const-decl "bool" relations nil)
    (permutations_is_transitive formula-decl nil sorting nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (listn_0 name-judgement "listn[nat](0)" sorting_seq nil)
    (finseq2list const-decl "list[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (perm_fsq_iff_perm_list formula-decl nil sorting_seq nil)
    (symmetric? const-decl "bool" relations nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (reflexive? const-decl "bool" relations nil)
    (permutations const-decl "bool" sorting_seq nil))
   shostak))
 (psorted_TCC1 0
  (psorted_TCC1-1 nil 3651167506 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (sorted_TCC1 0
  (sorted_TCC1-1 nil 3651167506 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ind_parent_TCC1 0
  (ind_parent_TCC1-1 nil 3651167506 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (left_child_TCC1 0
  (left_child_TCC1-1 nil 3651167506 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (right_child_TCC1 0
  (right_child_TCC1-1 nil 3651167506 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ind_rc const-decl "nat" sorting_seq nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (is_p_heap_TCC1 0
  (is_p_heap_TCC1-1 nil 3651243919 ("" (subtype-tcc) nil nil) nil nil))
 (is_p_heap_TCC2 0
  (is_p_heap_TCC2-1 nil 3651243919 ("" (subtype-tcc) nil nil) nil nil))
 (is_p_heap_TCC3 0
  (is_p_heap_TCC3-1 nil 3651243919 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ind_rc const-decl "nat" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (is_p_heap_TCC4 0
  (is_p_heap_TCC4-1 nil 3651243919 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (left_child const-decl "nat" sorting_seq nil)
    (ind_rc const-decl "nat" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (is_p_heap_TCC5 0
  (is_p_heap_TCC5-1 nil 3651243919 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ind_rc const-decl "nat" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (left_child const-decl "nat" sorting_seq nil)
    (right_child const-decl "nat" sorting_seq nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (root_is_greatest_in_p_heap_TCC1 0
  (root_is_greatest_in_p_heap_TCC1-1 nil 3651945337
   ("" (subtype-tcc) nil nil) nil nil))
 (root_is_greatest_in_p_heap_TCC2 0
  (root_is_greatest_in_p_heap_TCC2-1 nil 3651945337
   ("" (subtype-tcc) nil nil) nil nil))
 (root_is_greatest_in_p_heap_TCC3 0
  (root_is_greatest_in_p_heap_TCC3-1 nil 3651945337
   ("" (subtype-tcc) nil nil)
   ((ind_rc const-decl "nat" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (left_child const-decl "nat" sorting_seq nil)
    (right_child const-decl "nat" sorting_seq nil)
    (is_p_heap const-decl "bool" sorting_seq nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (root_is_greatest_in_p_heap 0
  (root_is_greatest_in_p_heap-2 nil 3652719850
   ("" (auto-rewrite "finseq_appl")
    (("" (skolem 1 ("h" "n" "_"))
      (("" (measure-induct+ "i" ("i"))
        (("" (case "x!1 = 0")
          (("1" (hide -2 -3) (("1" (grind) nil nil)) nil)
           ("2" (inst -1 "ind_parent(x!1)")
            (("1" (prop)
              (("1" (expand "is_p_heap")
                (("1" (inst -2 "ind_parent(x!1)")
                  (("1" (prop)
                    (("1" (assert)
                      (("1" (expand "left_child")
                        (("1" (expand "right_child")
                          (("1" (expand "ind_lc")
                            (("1" (expand "ind_rc")
                              (("1"
                                (expand "ind_parent")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "ind_parent")
                      (("2" (expand "one_child")
                        (("2" (expand "ind_rc")
                          (("2" (expand "left_child")
                            (("2" (assert)
                              (("2"
                                (expand "ind_lc")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -1 3)
                      (("3" (expand "ind_parent")
                        (("3" (expand "is_parent")
                          (("3" (expand "both_childs")
                            (("3" (expand "one_child")
                              (("3"
                                (expand "ind_rc")
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide -1 3)
                      (("4" (expand "ind_parent")
                        (("4" (typepred "x!1") (("4" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 3)
                    (("2" (expand "ind_parent")
                      (("2" (typepred "x!1" "n")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 3) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (hide 2) (("2" (grind) nil nil)) nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (right_child const-decl "nat" sorting_seq nil)
    (ind_rc const-decl "nat" sorting_seq nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (left_child const-decl "nat" sorting_seq nil)
    (ind_parent const-decl "nat" sorting_seq nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (x!1 skolem-const-decl "below[1 + n]" sorting_seq nil)
    (n skolem-const-decl "below[length(h)]" sorting_seq nil)
    (h skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (> const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (is_p_heap const-decl "bool" sorting_seq nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (root_is_greatest_in_p_heap-1 nil 3651945338
   ("" (skolem 1 ("h" "n" "_"))
    (("" (induct "i")
      (("1" (prop) (("1" (assert) nil nil)) nil)
       ("2" (skeep) (("2" (postpone) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (root_is_greatest_in_heap_TCC1 0
  (root_is_greatest_in_heap_TCC1-1 nil 3653754711
   ("" (subtype-tcc) nil nil)
   ((ind_rc const-decl "nat" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (left_child const-decl "nat" sorting_seq nil)
    (right_child const-decl "nat" sorting_seq nil)
    (is_p_heap const-decl "bool" sorting_seq nil)
    (is_heap const-decl "bool" sorting_seq nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (root_is_greatest_in_heap 0
  (root_is_greatest_in_heap-1 nil 3653754896
   ("" (expand "finseq_appl")
    (("" (skeep)
      (("" (lemma "root_is_greatest_in_p_heap")
        (("" (expand "finseq_appl")
          (("" (inst?)
            (("" (expand "is_heap") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((is_heap const-decl "bool" sorting_seq nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (root_is_greatest_in_p_heap formula-decl nil sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (parent_TCC1 0
  (parent_TCC1-1 nil 3651167506 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ind_gc_TCC1 0
  (ind_gc_TCC1-1 nil 3651167506 ("" (subtype-tcc) nil nil) nil nil))
 (ind_gc_TCC2 0
  (ind_gc_TCC2-1 nil 3651167506 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (ind_rc const-decl "nat" sorting_seq nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (ind_gc_TCC3 0
  (ind_gc_TCC3-1 nil 3651167506 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (ind_rc const-decl "nat" sorting_seq nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (swap_of_p_heap_TCC1 0
  (swap_of_p_heap_TCC1-1 nil 3651945177 ("" (subtype-tcc) nil nil)
   ((ind_rc const-decl "nat" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (left_child const-decl "nat" sorting_seq nil)
    (right_child const-decl "nat" sorting_seq nil)
    (is_p_heap const-decl "bool" sorting_seq nil)
    (swap const-decl "finite_sequence[nat]" sorting_seq nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (swap_of_p_heap 0
  (swap_of_p_heap-1 nil 3651945178
   ("" (skeep)
    (("" (expand "finseq_appl")
      (("" (expand "swap")
        (("" (expand "finseq_appl")
          (("" (lemma "root_is_greatest_in_p_heap")
            (("" (inst?)
              (("" (inst -1 "i")
                (("" (assert)
                  (("" (expand "finseq_appl") (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (root_is_greatest_in_p_heap formula-decl nil sorting_seq nil)
    (swap const-decl "finite_sequence[nat]" sorting_seq nil))
   shostak))
 (swap_commutes 0
  (swap_commutes-1 nil 3651841474
   ("" (skeep)
    (("" (expand "swap")
      (("" (decompose-equality)
        (("" (lift-if)
          (("" (lift-if)
            (("" (prop)
              (("" (expand "finseq_appl") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((swap const-decl "finite_sequence[nat]" sorting_seq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil))
   shostak))
 (occ_replaces_at_j_TCC1 0
  (occ_replaces_at_j_TCC1-1 nil 3653078999 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (occ_replaces_at_j 0
  (occ_replaces_at_j-1 nil 3653082224
   ("" (expand "finseq_appl")
    (("" (measure-induct+ "length(h)" ("h"))
      (("" (skeep)
        (("" (case "j = 0")
          (("1" (replaces -1)
            (("1" (lift-if)
              (("1" (hide -1)
                (("1"
                  (case "(# length := length(x!1),
                                           seq
                                             := LAMBDA (k: below[length(x!1)]):
                                                  IF k = 0 THEN x!1`seq(0)
                                                  ELSE x!1`seq(k)
                                                  ENDIF #) = x!1")
                  (("1"
                    (case "(# length := length(x!1),
                                           seq
                                             := LAMBDA (k: below[length(x!1)]):
                                                  IF k = 0 THEN x ELSE x!1`seq(k) ENDIF #)
                                         ^ (1, length(x!1) - 1) = x!1 ^ (1, length(x!1) - 1)")
                    (("1" (prop)
                      (("1" (replaces -1) (("1" (assert) nil nil)) nil)
                       ("2" (replaces -1)
                        (("2" (expand "occurrences" 1)
                          (("2" (expand "finseq_appl")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (expand "occurrences" 1)
                        (("3" (expand "finseq_appl")
                          (("3" (assert) nil nil)) nil))
                        nil)
                       ("4" (expand "occurrences" 2)
                        (("4" (expand "finseq_appl")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (hide -1 2)
                      (("2" (decompose-equality)
                        (("1" (grind) nil nil)
                         ("2" (decompose-equality)
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (decompose-equality)
                      (("2" (decompose-equality)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "x!1 ^ (1, length(x!1) -1)" "j - 1" "x" "y")
            (("1"
              (case "(# length := length(x!1 ^ (1, length(x!1) - 1)),
                                                 seq
                                                   := LAMBDA (k:
                                                                below
                                                                [length(x!1 ^ (1, length(x!1) - 1))]):
                                                        IF k = j - 1 THEN x
                                                        ELSE (x!1 ^ (1, length(x!1) - 1))`seq(k)
                                                        ENDIF #) = (# length := length(x!1),
                                                  seq
                                                    := LAMBDA (k: below[length(x!1)]):
                                                         IF k = j THEN x ELSE x!1`seq(k) ENDIF #)
                                                ^ (1, length(x!1) - 1)")
              (("1" (replaces -1)
                (("1" (split -1 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand "occurrences" 1)
                        (("1" (expand "finseq_appl")
                          (("1" (assert)
                            (("1" (lift-if) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -3 1) (("2" (grind) nil nil)) nil)
                       ("3" (hide -3 1) (("3" (grind) nil nil)) nil)
                       ("4" (hide -2 2) (("4" (grind) nil nil)) nil)
                       ("5" (hide -3 1) (("5" (grind) nil nil)) nil)
                       ("6" (replaces -1)
                        (("6" (expand "occurrences" 1)
                          (("6" (expand "finseq_appl")
                            (("6" (assert)
                              (("6"
                                (lift-if)
                                (("6" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("7" (hide -2 -3 1) (("7" (grind) nil nil)) nil)
                       ("8" (expand "occurrences" 1)
                        (("8" (expand "finseq_appl")
                          (("8" (assert)
                            (("8" (lift-if) (("8" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("9" (hide -2 2 6) (("9" (grind) nil nil)) nil)
                       ("10" (hide -2 1 2) (("10" (grind) nil nil))
                        nil)
                       ("11" (hide -2 1 6) (("11" (grind) nil nil))
                        nil)
                       ("12" (expand "occurrences" 2)
                        (("12" (expand "finseq_appl")
                          (("12" (assert)
                            (("12" (lift-if) (("12" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide - 2 3)
                (("2" (decompose-equality)
                  (("1" (grind) nil nil)
                   ("2" (decompose-equality) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (skeep) (("3" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (hide 3) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (occurrences def-decl "nat" sorting_seq nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (j skolem-const-decl "below[length(x!1)]" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (swap_occ_at_0_TCC1 0
  (swap_occ_at_0_TCC1-1 nil 3653031566 ("" (subtype-tcc) nil nil) nil
   nil))
 (swap_occ_at_0_TCC2 0
  (swap_occ_at_0_TCC2-1 nil 3653031566 ("" (subtype-tcc) nil nil) nil
   nil))
 (swap_occ_at_0 0
  (swap_occ_at_0-1 nil 3653037944
   ("" (expand "finseq_appl")
    (("" (skeep)
      (("" (lift-if)
        (("" (prop)
          (("1" (lemma "occ_replaces_at_j")
            (("1" (expand "finseq_appl")
              (("1"
                (inst -1 "h ^ (1, length(h) - 1)" "j - 1" "h`seq(0)"
                 "x")
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (expand "^ " -1)
                      (("1" (expand "occurrences" 1 2)
                        (("1" (expand "finseq_appl")
                          (("1" (assert)
                            (("1"
                              (case "(# length := length(h ^ (1, length(h) - 1)),
                     seq
                       := LAMBDA (k:
                                    below[length(h ^ (1, length(h) - 1))]):
                            IF k = j - 1 THEN h`seq(0)
                            ELSE (h ^ (1, length(h) - 1))`seq(k)
                            ENDIF #) = swap(h)(0, j) ^ (1, length(h) - 1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -2 2)
                                (("2"
                                  (decompose-equality)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (decompose-equality)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -2 2)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 2) (("2" (grind) nil nil)) nil)
                     ("3" (expand "^ " 2)
                      (("3" (expand "^ " -1)
                        (("3" (expand "occurrences" 3 2)
                          (("3" (expand "finseq_appl")
                            (("3" (assert)
                              (("3"
                                (case
                                 "(# length := length(h ^ (1, length(h) - 1)),
                     seq
                       := LAMBDA (k:
                                    below[length(h ^ (1, length(h) - 1))]):
                            IF k = j - 1 THEN h`seq(0)
                            ELSE (h ^ (1, length(h) - 1))`seq(k)
                            ENDIF #)  = swap(h)(0, j) ^ (1, length(h) - 1)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -2 4)
                                  (("2"
                                    (decompose-equality)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (decompose-equality)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -2 4)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide -1 4) (("4" (grind) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "occ_replaces_at_j")
            (("2" (expand "finseq_appl")
              (("2" (assert)
                (("2"
                  (inst -1 "h ^ (1, length(h) - 1)" "j - 1" "h`seq(0)"
                   "x")
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (expand " ^ " -1)
                        (("1" (expand "occurrences" 2 2)
                          (("1" (expand "finseq_appl")
                            (("1" (assert)
                              (("1"
                                (case
                                 "(# length := length(h ^ (1, length(h) - 1)),
                     seq
                       := LAMBDA (k:
                                    below[length(h ^ (1, length(h) - 1))]):
                            IF k = j - 1 THEN h`seq(0)
                            ELSE (h ^ (1, length(h) - 1))`seq(k)
                            ENDIF #) = swap(h)(0, j) ^ (1, length(h) - 1)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -2 3)
                                  (("2"
                                    (decompose-equality)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (decompose-equality)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -2 3)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "^ " 1)
                        (("2" (expand "occurrences" 3 2)
                          (("2" (expand "finseq_appl")
                            (("2" (assert)
                              (("2"
                                (case
                                 "(# length := length(h ^ (1, length(h) - 1)),
                     seq
                       := LAMBDA (k:
                                    below[length(h ^ (1, length(h) - 1))]):
                            IF k = j - 1 THEN h`seq(0)
                            ELSE (h ^ (1, length(h) - 1))`seq(k)
                            ENDIF #) = swap(h)(0, j) ^ (1, length(h) - 1)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -2 4)
                                  (("2"
                                    (decompose-equality)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (decompose-equality)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide -2 4)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide -2 4) (("3" (grind) nil nil)) nil)
                       ("4" (expand "^ " 1)
                        (("4" (expand "^ " 3)
                          (("4" (expand " occurrences" 5 2)
                            (("4" (expand "finseq_appl")
                              (("4"
                                (assert)
                                (("4"
                                  (case
                                   "(# length := length(h ^ (1, length(h) - 1)),
                     seq
                       := LAMBDA (k:
                                    below[length(h ^ (1, length(h) - 1))]):
                            IF k = j - 1 THEN h`seq(0)
                            ELSE (h ^ (1, length(h) - 1))`seq(k)
                            ENDIF #) = swap(h)(0, j) ^ (1, length(h) - 1)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide -1 6)
                                    (("2"
                                      (decompose-equality)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (decompose-equality)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide -1 6)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (swap const-decl "finite_sequence[nat]" sorting_seq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (occurrences def-decl "nat" sorting_seq nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (h skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (> const-decl "bool" reals nil)
    (j skolem-const-decl "{j: below[length(h)] | j > 0}" sorting_seq
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (occ_replaces_at_j formula-decl nil sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak))
 (swap_permutes 0
  (swap_permutes-3 nil 3653037248
   ("" (measure-induct+ "length(h)" "h")
    (("" (skeep)
      (("" (typepred "i" "j")
        (("" (case "i = j")
          (("1" (hide -4)
            (("1" (replaces -1)
              (("1" (hide -)
                (("1" (case "x!1 = swap(x!1)(j,j)")
                  (("1" (replace -1 1 rl)
                    (("1" (hide -) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (hide 2)
                    (("2" (decompose-equality 1)
                      (("1" (expand "swap") (("1" (propax) nil nil))
                        nil)
                       ("2" (decompose-equality 1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "NOT i = 0 AND NOT j = 0")
            (("1" (flatten)
              (("1" (expand "permutations" 4)
                (("1" (skeep)
                  (("1" (expand "occurrences")
                    (("1" (expand "finseq_appl")
                      (("1"
                        (inst -3 "x!1 ^ (1, length(x!1) - 1)" "i-1"
                         "j-1")
                        (("1" (lift-if)
                          (("1" (expand "permutations")
                            (("1" (expand "swap" 4 (1 4 6 7 10 12))
                              (("1"
                                (lift-if)
                                (("1"
                                  (case
                                   "swap(x!1 ^ (1, length(x!1) - 1))(i - 1, j - 1) = swap(x!1)(i, j) ^ (1, length(x!1) - 1)")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (prop)
                                              (("1"
                                                (hide -2)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (hide -2 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 5)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -3 5)
                                    (("2"
                                      (decompose-equality)
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (decompose-equality)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide -3 5)
                                    (("3" (grind) nil nil))
                                    nil)
                                   ("4"
                                    (hide -3 5)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 5) (("2" (grind) nil nil)) nil)
                         ("3" (hide 5) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -3)
              (("2" (split)
                (("1" (replaces -1)
                  (("1" (expand "permutations")
                    (("1" (skeep)
                      (("1" (lemma "swap_occ_at_0")
                        (("1" (expand "finseq_appl")
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1"
                                (expand "occurrences" 2)
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (expand "swap" 2 (1 4 6))
                                    (("1"
                                      (expand "occurrences" -1 (2 3))
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -3 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (hide -1 2)
                                                    (("4"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (hide -4 1)
                                                    (("5"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("6"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("7"
                                                    (hide -2 1)
                                                    (("7"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("8"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replaces -1)
                  (("2" (expand "permutations")
                    (("2" (skeep)
                      (("2" (lemma "swap_occ_at_0")
                        (("2" (expand "finseq_appl")
                          (("2" (inst?)
                            (("2" (inst?)
                              (("1"
                                (expand "occurrences" 2)
                                (("1"
                                  (expand "finseq_appl")
                                  (("1"
                                    (expand "swap" 2 (1 4 6))
                                    (("1"
                                      (expand "occurrences" -1 (2 3))
                                      (("1"
                                        (expand "finseq_appl")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "swap_commutes")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -3 2)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     "swap_commutes")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide -1 2)
                                                    (("4"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (hide -4 1)
                                                    (("5"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("6"
                                                    (rewrite
                                                     "swap_commutes")
                                                    (("6"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("7"
                                                    (hide -2 1)
                                                    (("7"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("8"
                                                    (rewrite
                                                     "swap_commutes")
                                                    (("8"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (swap_commutes formula-decl nil sorting_seq nil)
    (> const-decl "bool" reals nil)
    (swap_occ_at_0 formula-decl nil sorting_seq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (i skolem-const-decl "below[length(x!1)]" sorting_seq nil)
    (j skolem-const-decl "below[length(x!1)]" sorting_seq nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (occurrences def-decl "nat" sorting_seq nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (swap const-decl "finite_sequence[nat]" sorting_seq nil)
    (permutations const-decl "bool" sorting_seq nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (swap_permutes-2 nil 3651937530
   ("" (measure-induct+ "length(h)" "h")
    (("" (skeep)
      (("" (typepred "i" "j")
        (("" (case "i = j")
          (("1" (hide -4)
            (("1" (replaces -1)
              (("1" (hide -)
                (("1" (case "x!1 = swap(x!1)(j,j)")
                  (("1" (replace -1 1 rl)
                    (("1" (hide -) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (hide 2)
                    (("2" (decompose-equality 1)
                      (("1" (expand "swap") (("1" (propax) nil nil))
                        nil)
                       ("2" (decompose-equality 1)
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "NOT i = 0 AND NOT j = 0")
            (("1" (flatten)
              (("1" (expand "permutations" 4)
                (("1" (skeep)
                  (("1" (expand "occurrences")
                    (("1" (expand "finseq_appl")
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (expand "swap" 1 (1 4 6))
                            (("1" (expand "swap" 1 1)
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -4
                                     "x!1 ^ (1, length(x!1) - 1)"
                                     "i-1"
                                     "j-1")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "permutations")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (case
                                             "swap(x!1 ^ (1, length(x!1) - 1))(i - 1, j - 1) = swap(x!1)(i, j) ^ (1, length(x!1) - 1)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (expand "swap")
                                                  (("1"
                                                    (expand "^" 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (expand "swap")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "^ " 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "^ " 1)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (expand "^ " 1)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "swap" 2 (1 4 6))
                            (("2" (expand "swap" 2 1)
                              (("2"
                                (expand "finseq_appl")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -3
                                     "x!1 ^ (1, length(x!1) - 1)"
                                     "i-1"
                                     "j-1")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "permutations")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (case
                                             "swap(x!1 ^ (1, length(x!1) - 1))(i - 1, j - 1) = swap(x!1)(i, j) ^ (1, length(x!1) - 1)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -1 3)
                                              (("2"
                                                (decompose-equality 1)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (expand "swap")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "^" 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "^" 1)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3"
                                      (expand "^" 1)
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (split)
              (("1" (replaces -1)
                (("1" (expand "permutations")
                  (("1" (skeep)
                    (("1" (lemma "swap_occ_at_0")
                      (("1" (expand "finseq_appl")
                        (("1" (inst?)
                          (("1" (inst?)
                            (("1" (expand "occurrences" 2)
                              (("1"
                                (expand "finseq_appl")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand "swap" -1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "swap" 1 2)
                                        (("2"
                                          (expand "occurrences" -4 2)
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "swap" 2 2)
                                        (("3"
                                          (expand "occurrences" -3 2)
                                          (("3"
                                            (expand "finseq_appl")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "swap" 1)
                                                (("3"
                                                  (expand
                                                   "finseq_appl")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (lift-if)
                                        (("4"
                                          (prop)
                                          (("1"
                                            (expand "swap" -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand "occurrences" -3 2)
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "swap" 1 2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "swap" 1)
                                            (("3"
                                              (expand "finseq_appl")
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (expand "swap" -1)
                                        (("5" (assert) nil nil))
                                        nil)
                                       ("6"
                                        (expand "swap " -1)
                                        (("6"
                                          (expand "finseq_appl")
                                          (("6" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("7"
                                        (expand "swap" 2 2)
                                        (("7"
                                          (expand "occurrences" -2 2)
                                          (("7"
                                            (expand "finseq_appl")
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("8"
                                        (expand "swap" 2 (1 2 6))
                                        (("8"
                                          (expand "finseq_appl")
                                          (("8"
                                            (assert)
                                            (("8"
                                              (expand
                                               "occurrences"
                                               -1
                                               2)
                                              (("8"
                                                (expand "finseq_appl")
                                                (("8"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replaces -1) (("2" (postpone) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (swap_permutes-1 nil 3651244150
   ("" (expand "permutations")
    (("" (expand "swap")
      (("" (expand "finseq_appl")
        (("" (measure-induct+ "length(h)" "h")
          (("" (case "length(x!1) = 0")
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (skeep)
              (("2" (skeep)
                (("2" (case "x!1`seq(i) = x!1`seq(j)")
                  (("1" (hide -2)
                    (("1"
                      (case "x!1 = (# length := length(x!1),
                      seq
                        := LAMBDA (k: below[length(x!1)]):
                             IF k = i THEN x!1`seq(j)
                             ELSIF k = j THEN x!1`seq(i)
                             ELSE x!1`seq(k)
                             ENDIF #)")
                      (("1" (assert) nil nil)
                       ("2" (hide 3)
                        (("2" (decompose-equality 1)
                          (("2" (decompose-equality 1)
                            (("2" (lift-if)
                              (("2"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "NOT (i=0 OR j=0)")
                    (("1" (flatten)
                      (("1" (inst -1 "x!1^(1,length(x!1)-1)")
                        (("1" (inst -1 "i-1" "j-1")
                          (("1" (assert)
                            (("1" (prop)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (expand "occurrences" 5)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (case
                                         "(# length := length(x!1 ^ (1, length(x!1) - 1)),
                      seq
                        := LAMBDA (k:
                                     below
                                     [length(x!1 ^ (1, length(x!1) - 1))]):
                             IF k = i - 1
                               THEN (x!1 ^ (1, length(x!1) - 1))`seq(j - 1)
                             ELSIF k = j - 1
                               THEN (x!1 ^ (1, length(x!1) - 1))`seq(i - 1)
                             ELSE (x!1 ^ (1, length(x!1) - 1))`seq(k)
                             ENDIF #) = (# length := length(x!1),
                      seq
                        := LAMBDA (k: below[length(x!1)]):
                             IF k = i THEN x!1`seq(j)
                             ELSIF k = j THEN x!1`seq(i)
                             ELSE x!1`seq(k)
                             ENDIF #)
                    ^ (1, length(x!1) - 1)")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide -1 6)
                                          (("2"
                                            (expand "^" 1 5)
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (decompose-equality)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (typepred "x!2")
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4" (grind) nil nil)
                                                 ("5"
                                                  (skeep)
                                                  (("5"
                                                    (typepred "i")
                                                    (("5"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (skeep)
                                                  (("6"
                                                    (typepred "j")
                                                    (("6"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide -1 6)
                                          (("3"
                                            (skeep)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (hide -1 6)
                                          (("4" (grind) nil nil))
                                          nil)
                                         ("5"
                                          (hide -1 6)
                                          (("5" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 6)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 6) (("2" (grind) nil nil)) nil)
                           ("3" (hide 6) (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "length(x!1) = 1")
                      (("1" (hide -3) (("1" (grind) nil nil)) nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (swap_of_heap_TCC1 0
  (swap_of_heap_TCC1-1 nil 3651335364 ("" (subtype-tcc) nil nil)
   ((ind_rc const-decl "nat" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (left_child const-decl "nat" sorting_seq nil)
    (right_child const-decl "nat" sorting_seq nil)
    (is_p_heap const-decl "bool" sorting_seq nil)
    (is_heap const-decl "bool" sorting_seq nil)
    (swap const-decl "finite_sequence[nat]" sorting_seq nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (swap_of_heap_TCC2 0
  (swap_of_heap_TCC2-1 nil 3651335364 ("" (subtype-tcc) nil nil)
   ((ind_rc const-decl "nat" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (left_child const-decl "nat" sorting_seq nil)
    (right_child const-decl "nat" sorting_seq nil)
    (is_p_heap const-decl "bool" sorting_seq nil)
    (is_heap const-decl "bool" sorting_seq nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (swap_of_heap 0
  (swap_of_heap-1 nil 3651335367
   ("" (expand "swap")
    (("" (expand "finseq_appl")
      (("" (skeep)
        (("" (lemma "root_is_greatest_in_heap")
          (("" (inst -1 "h" "i")
            (("" (prop)
              (("1" (typepred i) (("1" (grind) nil nil)) nil)
               ("2" (expand "finseq_appl") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (root_is_greatest_in_heap formula-decl nil sorting_seq nil)
    (ind_rc const-decl "nat" sorting_seq nil)
    (both_childs const-decl "bool" sorting_seq nil)
    (one_child const-decl "bool" sorting_seq nil)
    (is_parent const-decl "bool" sorting_seq nil)
    (ind_lc const-decl "nat" sorting_seq nil)
    (left_child const-decl "nat" sorting_seq nil)
    (right_child const-decl "nat" sorting_seq nil)
    (is_p_heap const-decl "bool" sorting_seq nil)
    (is_heap const-decl "bool" sorting_seq nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (swap const-decl "finite_sequence[nat]" sorting_seq nil))
   shostak))
 (occ_in_insert 0
  (occ_in_insert-1 nil 3716499267
   ("" (measure-induct+ "length(v)" "v")
    (("" (skeep)
      (("" (case "length(x!1)=0")
        (("1" (hide -2) (("1" (grind) nil nil)) nil)
         ("2"
          (case "FORALL(v:finseq[nat])(k:upto[length(v)])(y,x:nat):occurrences(insert?(y, v, k))(x)
                                           = occurrences(insert?(y, v, 0))(x)")
          (("1" (inst -1 "x!1" "k" "y" "x")
            (("1" (replaces -1 2)
              (("1" (prop)
                (("1" (replace -1)
                  (("1" (expand "occurrences" 1 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (expand "insert?" -1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "finseq_appl")
                          (("2" (reveal -4)
                            (("2"
                              (case "  occurrences(insert?(y, x!1, 0) ^ (1, length(insert?(y, x!1, 0)) - 1))
                                                                                (y) = occurrences(x!1)(y)")
                              (("1" (replaces -1) nil nil)
                               ("2"
                                (hide-all-but (1 4))
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (expand "insert?" 1)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "finseq_appl")
                          (("3" (expand "insert?" 1)
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "occurrences" 2 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "insert?" -1)
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand "finseq_appl")
                        (("2" (expand "insert?" -1)
                          (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (expand "finseq_appl")
                        (("3" (hide-all-but 2) (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (1 2))
            (("2" (measure-induct+ "length(v)" "v")
              (("1" (skeep)
                (("1" (skeep)
                  (("1" (case "k!1=0")
                    (("1" (replaces -1 1) nil nil)
                     ("2" (expand "occurrences" 2 1)
                      (("2" (expand "finseq_appl")
                        (("2"
                          (case "insert?(y!1, x!2^(1, length(x!2)-1), k!1 -1) = insert?(y!1, x!2, k!1) ^ (1, length(insert?(y!1, x!2, k!1))-1)")
                          (("1" (inst -2 "x!2^(1,length(x!2)-1)")
                            (("1" (inst -2 "k!1 - 1")
                              (("1"
                                (split)
                                (("1"
                                  (inst -1 "y!1" "x!3")
                                  (("1"
                                    (replaces -2)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide-all-but -1)
                                          (("1"
                                            (expand "insert?")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -2)
                                          (("2"
                                            (expand "occurrences" 1 2)
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (hide-all-but -1)
                                                    (("1"
                                                      (expand
                                                       "insert?")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "insert?(y!1, x!2, 0) ^(1, length(insert?(y!1, x!2, 0)) - 1) = x!2")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (case
                                                         "occurrences(insert?(y!1, x!2 ^ (1, length(x!2) - 1), 0))(x!3) = 1 + occurrences(x!2^(1,length(x!2)-1))(x!3)")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "insert?"
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "occurrences"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (expand
                                                                           "^"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "empty_seq")
                                                                            (("1"
                                                                              (expand
                                                                               "min")
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (case
                                                                                     "length(x!2) = 1")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "^")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "occurrences")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "empty_seq")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "x!2`length = 1")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "^")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "occurrences")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "empty_seq")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "^"
                                                                           -1)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (case
                                                                                 "length(x!2)=1")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "empty_seq")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (case
                                                                                   "length(x!2)=1")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "empty_seq")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "insert?")
                                                                                (("3"
                                                                                  (expand
                                                                                   "occurrences"
                                                                                   3
                                                                                   2)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "finseq_appl")
                                                                                    (("3"
                                                                                      (lift-if)
                                                                                      (("3"
                                                                                        (prop)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "occurrences"
                                                                           2
                                                                           2)
                                                                          (("3"
                                                                            (expand
                                                                             "finseq_appl")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 3 4)
                                                          (("2"
                                                            (expand
                                                             "insert?"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "insert?"
                                                               -2)
                                                              (("2"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "occurrences"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "finseq_appl")
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (expand
                                                                             "insert?")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "insert?(y!1, x!2 ^ (1, length(x!2) - 1), 0) ^
                                                     (1,
                                                      length(insert?(y!1, x!2 ^ (1, length(x!2) - 1), 0)) -
                                                       1) = x!2 ^ (1, length(x!2) - 1)")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               -3
                                                                               2
                                                                               4
                                                                               3
                                                                               5)
                                                                              (("2"
                                                                                (decompose-equality)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (decompose-equality)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               (1
                                                                                6))
                                                                              (("3"
                                                                                (expand
                                                                                 "insert?")
                                                                                (("3"
                                                                                  (expand
                                                                                   "^")
                                                                                  (("3"
                                                                                    (lift-if)
                                                                                    (("3"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (expand
                                                                                         "min")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             "insert?")
                                                                            (("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "^" 1)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "insert?"
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "insert?"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             (3 8))
                                                            (("3"
                                                              (decompose-equality)
                                                              (("1"
                                                                (expand
                                                                 "min")
                                                                (("1"
                                                                  (expand
                                                                   "insert?")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (decompose-equality)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide-all-but 1)
                                                      (("3"
                                                        (expand
                                                         "insert?")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (case
                                                     "occurrences(insert?(y!1, x!2 ^ (1, length(x!2) - 1), 0))(x!3) =
                                  occurrences(x!2 ^ (1, length(x!2) - 1))(x!3)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (case
                                                         "insert?(y!1, x!2, 0) ^
                                                 (1, length(insert?(y!1, x!2, 0)) - 1) =  x!2")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "insert?"
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "occurrences"
                                                                   2
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (decompose-equality)
                                                          (("1"
                                                            (hide-all-but
                                                             1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (hide 3)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (1 2 -1 7))
                                                      (("2"
                                                        (expand
                                                         "occurrences"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "finseq_appl")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (hide-all-but
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "insert?")
                                                                  (("1"
                                                                    (expand
                                                                     "^")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (case
                                                                 "insert?(y!1, x!2 ^ (1, length(x!2) - 1), 0) ^  (1,
                                                   length(insert?(y!1, x!2 ^ (1, length(x!2) - 1), 0)) -
                                                    1) = x!2 ^ (1, length(x!2) - 1)")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (decompose-equality)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (replaces -1)
                                            (("3"
                                              (expand
                                               "occurrences"
                                               2
                                               2)
                                              (("3"
                                                (expand "finseq_appl")
                                                (("3"
                                                  (lift-if)
                                                  (("3"
                                                    (prop)
                                                    (("1"
                                                      (expand
                                                       "insert?")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "insert?(y!1, x!2, 0) ^
                                                (1, length(insert?(y!1, x!2, 0)) - 1) = x!2")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (expand
                                                           "occurrences"
                                                           1
                                                           1)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "insert?")
                                                                (("1"
                                                                  (expand
                                                                   "^")
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "min")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (case
                                                                   "insert?(y!1, x!2 ^ (1, length(x!2) - 1), 0) ^
                                                   (1,
                                                    length(insert?(y!1, x!2 ^ (1, length(x!2) - 1), 0)) -
                                                     1) = x!2^(1,length(x!2)-1)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "occurrences"
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (expand
                                                                                 "insert?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "finseq_appl")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      8))
                                                                    (("2"
                                                                      (decompose-equality)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (decompose-equality)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (1 7))
                                                        (("2"
                                                          (decompose-equality)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (decompose-equality)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "occurrences"
                                                       2
                                                       1)
                                                      (("3"
                                                        (lift-if)
                                                        (("3"
                                                          (prop)
                                                          (("1"
                                                            (expand
                                                             "insert?")
                                                            (("1"
                                                              (expand
                                                               "^")
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "min")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (expand
                                                               "insert?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             "finseq_appl")
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (hide -1 3)
                            (("2" (case "length(x!2)>=2")
                              (("1"
                                (decompose-equality)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (decompose-equality)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("3" (grind) nil nil))
                                nil)
                               ("2"
                                (decompose-equality 2)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (decompose-equality)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("3" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (expand "insert?" 1)
                            (("3" (assert) nil nil)) nil)
                           ("4" (split)
                            (("1" (assert) nil nil)
                             ("2" (expand "^" 1)
                              (("2"
                                (expand "min")
                                (("2"
                                  (lift-if 1)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (expand "empty_seq")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "empty_seq")
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil) ("3" (assert) nil nil))
              nil))
            nil)
           ("3" (skeep) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (k!1 skolem-const-decl "upto[length(x!2)]" sorting_seq nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (y!1 skolem-const-decl "nat" sorting_seq nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (x!2 skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (insert? const-decl "finseq" seq_extras "structures/")
    (finseq type-eq-decl nil finite_sequences nil)
    (occurrences def-decl "nat" sorting_seq nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (occ_in_delete 0
  (occ_in_delete-2 nil 3716510597
   ("" (measure-induct+ "length(v)" "v")
    (("" (skeep)
      (("" (skeep)
        (("" (case "length(x!1) = 0")
          (("1" (hide -2)
            (("1" (typepred "i") (("1" (assert) nil nil)) nil)) nil)
           ("2" (case "length(x!1) = 1")
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (hide 1 2)
              (("2" (case "i=0")
                (("1" (replaces -1)
                  (("1" (expand "finseq_appl")
                    (("1" (expand "delete" 1)
                      (("1" (prop)
                        (("1" (expand "finseq_appl")
                          (("1"
                            (case "(# length := x!1`length-1,
                                                                                    seq := LAMBDA (i: below[x!1`length - 1]):
                                                                                          x!1`seq(1 + i) #) = x!1^(1,x!1`length-1)")
                            (("1" (replaces -1)
                              (("1"
                                (expand "occurrences" 1 2)
                                (("1"
                                  (expand "finseq_appl")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (decompose-equality)
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (expand "min")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (typepred "x!2")
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "finseq_appl")
                          (("2"
                            (case "(# length := x!1`length - 1,
                                                                                    seq := LAMBDA (i: below[x!1`length - 1]):
                                                                                           x!1`seq(1 + i) #) = x!1^(1,length(x!1)-1)")
                            (("1" (replaces -1)
                              (("1"
                                (expand "occurrences" 2 2)
                                (("1"
                                  (expand "finseq_appl")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (decompose-equality)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (decompose-equality)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (typepred "x!2")
                                (("3"
                                  (expand "^")
                                  (("3"
                                    (expand "min")
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "finseq_appl")
                  (("2" (inst -1 "x!1^(1,length(x!1)-1)")
                    (("2" (inst -1 "x")
                      (("2" (split)
                        (("1" (inst -1 "i-1")
                          (("1"
                            (case "delete(x!1 ^ (1, length(x!1) - 1), i - 1) = delete(x!1, i)^(1,length(delete(x!1,i))-1)")
                            (("1" (replaces -1)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "occurrences" 1 1)
                                  (("1"
                                    (expand "delete" 1 1)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (reveal 1 2)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (expand "occurrences" 1 2)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 1 4))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "occurrences" 2 2)
                                            (("3"
                                              (lift-if)
                                              (("3"
                                                (prop)
                                                (("3"
                                                  (expand
                                                   "finseq_appl")
                                                  (("3"
                                                    (hide-all-but
                                                     (-1 2 4))
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -2 2)
                                  (("2" (grind) nil nil))
                                  nil)
                                 ("3"
                                  (expand "occurrences" 1 1)
                                  (("3"
                                    (lift-if)
                                    (("3"
                                      (prop)
                                      (("1"
                                        (reveal 1 2)
                                        (("1"
                                          (hide-all-but (-1 1 5))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "finseq_appl")
                                        (("2"
                                          (hide-all-but (-2 3 4))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "finseq_appl")
                                        (("3"
                                          (hide-all-but (-1 4 5))
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (expand "occurrences" 2)
                                  (("4"
                                    (lift-if)
                                    (("4"
                                      (expand "finseq_appl")
                                      (("4"
                                        (lift-if)
                                        (("4"
                                          (prop)
                                          (("1"
                                            (reveal 1 2)
                                            (("1"
                                              (hide-all-but (-2 1 2))
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal 1 2)
                                            (("2"
                                              (hide-all-but (-1 1 2))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lift-if)
                                            (("3"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but (-1 1 6))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (lift-if)
                                            (("4"
                                              (prop)
                                              (("4"
                                                (hide-all-but (-1 2 6))
                                                (("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 3)
                              (("2"
                                (reveal 2 3)
                                (("2"
                                  (decompose-equality 3)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (decompose-equality 1)
                                    (("1"
                                      (typepred "x!2")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (reveal 1 2)
                              (("3"
                                (hide-all-but (1 2 3 4))
                                (("3" (grind) nil nil))
                                nil))
                              nil)
                             ("4" (reveal 1 2)
                              (("4"
                                (hide-all-but (1 2 3 4))
                                (("4" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (reveal 1 2)
                            (("2" (hide-all-but (1 2 3 4))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (reveal 1 2)
                          (("2" (hide-all-but (1 2 3 4))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "finite_sequence[nat]" sorting_seq nil)
    (i skolem-const-decl "below[length(x!1)]" sorting_seq nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (delete const-decl "finseq" seq_extras "structures/")
    (occurrences def-decl "nat" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (occ_in_delete-1 nil 3716499446
   ("" (measure-induct+ "length(v)" "v")
    (("" (skeep)
      (("" (skeep)
        (("" (case "length(x!1) = 0")
          (("1" (hide -2)
            (("1" (typepred "i") (("1" (assert) nil nil)) nil)) nil)
           ("2" (case "length(x!1) = 1")
            (("1" (hide -2) (("1" (grind) nil nil)) nil)
             ("2" (hide 1 2)
              (("2" (case "i=0")
                (("1" (replaces -1)
                  (("1" (expand "finseq_appl")
                    (("1" (expand "delete" 1)
                      (("1" (prop)
                        (("1" (expand "finseq_appl")
                          (("1"
                            (case "(# length := x!1`length-1,
                                                      seq := LAMBDA (i: below[x!1`length - 1]):
                                                            x!1`seq(1 + i) #) = x!1^(1,x!1`length-1)")
                            (("1" (replaces -1)
                              (("1"
                                (expand "occurrences" 1 2)
                                (("1"
                                  (expand "finseq_appl")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (typepred "x!1")
                                (("2"
                                  (decompose-equality)
                                  (("1"
                                    (expand "^")
                                    (("1"
                                      (expand "min")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (decompose-equality)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (expand "^")
                                (("3"
                                  (expand "min")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "finseq_appl")
                          (("2"
                            (case "(# length := x!1`length - 1,
                                                      seq := LAMBDA (i: below[x!1`length - 1]):
                                                             x!1`seq(1 + i) #) = x!1^(1,length(x!1)-1)")
                            (("1" (replaces -1)
                              (("1"
                                (expand "occurrences" 2 2)
                                (("1"
                                  (expand "finseq_appl")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (decompose-equality)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (decompose-equality)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (expand "^")
                                (("3"
                                  (expand "min")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "finseq_appl")
                  (("2" (inst -1 "x!1^(1,length(x!1)-1)")
                    (("1" (inst -1 "x")
                      (("1" (split)
                        (("1" (inst -1 "i-1")
                          (("1"
                            (case "delete(x!1 ^ (1, length(x!1) - 1), i - 1) = delete(x!1, i)^(1,length(delete(x!1,i))-1)")
                            (("1" (replaces -1)
                              (("1"
                                (prop)
                                (("1"
                                  (expand "occurrences" 1 1)
                                  (("1"
                                    (expand "delete" 1 1)
                                    (("1"
                                      (expand "finseq_appl")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (replaces -4 1)
                                            (("1"
                                              (expand "delete" -1)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "occurrences"
                                                     1
                                                     2)
                                                    (("1"
                                                      (expand
                                                       "finseq_appl")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replaces -3)
                                            (("2"
                                              (expand "delete")
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "occurrences"
                                                     2
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "occurrences" 2 1)
                                  (("2"
                                    (expand "^")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "occurrences" 1 1)
                                  (("3"
                                    (lift-if)
                                    (("3"
                                      (prop)
                                      (("1"
                                        (expand "^")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "^")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (expand "^")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (expand "occurrences" 2 2)
                                  (("4"
                                    (expand "finseq_appl")
                                    (("4"
                                      (lift-if)
                                      (("4"
                                        (prop)
                                        (("1"
                                          (expand "occurrences" 1 1)
                                          (("1"
                                            (expand "finseq_appl")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (replaces -3)
                                                  nil
                                                  nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "occurrences" 2 1)
                                          (("2"
                                            (expand "finseq_appl")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (expand "^" -1 1)
                                                    (("1"
                                                      (expand
                                                       "occurrences"
                                                       -1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "empty_seq")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 2))
                              (("2"
                                (case "length(x!1) = 2")
                                (("1"
                                  (lemma "empty_0")
                                  (("1"
                                    (inst
                                     -1
                                     "delete(x!1 ^ (1, length(x!1) - 1), i - 1)")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split)
                                        (("1"
                                          (replace -1)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (hide -1 2 3)
                                          (("2"
                                            (expand "delete")
                                            (("2"
                                              (expand "^")
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality 2)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (decompose-equality)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("3"
                                    (expand "delete")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "delete" 1)
                              (("3" (assert) nil nil)) nil)
                             ("4" (split)
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "^" 1)
                                (("2"
                                  (expand "min")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split)
                            (("1" (assert) nil nil)
                             ("2" (expand "^")
                              (("2"
                                (expand "min")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "^")
                          (("2" (expand "min") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "^")
                      (("2" (expand "min")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty_0 formula-decl nil seq_extras "structures/")
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "finseq" finite_sequences nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (delete const-decl "finseq" seq_extras "structures/")
    (occurrences def-decl "nat" sorting_seq nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (delete_insert_same_permutes_TCC1 0
  (delete_insert_same_permutes_TCC1-1 nil 3716323005
   ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (delete const-decl "finseq" seq_extras "structures/"))
   nil))
 (delete_insert_same_permutes 0
  (delete_insert_same_permutes-1 nil 3716335878
   ("" (skeep)
    (("" (skeep)
      (("" (expand "permutations")
        (("" (skeep)
          (("" (lemma "occ_in_delete")
            (("" (lemma "occ_in_insert")
              (("" (inst -2 "v" "x" "i")
                (("1" (prop)
                  (("1"
                    (inst -3 "delete(v,i)" "x" "finseq_appl[nat](v)(i)"
                     "j")
                    (("1" (assert) nil nil)) nil)
                   ("2"
                    (inst -2 "delete(v,i)" "x" "finseq_appl[nat](v)(i)"
                     "j")
                    (("2" (assert) nil nil)) nil))
                  nil)
                 ("2" (typepred "v")
                  (("2" (case "length(v) = 1")
                    (("1" (hide -3) (("1" (grind) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((occ_in_insert formula-decl nil sorting_seq nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upto nonempty-type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (delete const-decl "finseq" seq_extras "structures/")
    (finseq type-eq-decl nil finite_sequences nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (occ_in_delete formula-decl nil sorting_seq nil)
    (permutations const-decl "bool" sorting_seq nil))
   shostak)))

